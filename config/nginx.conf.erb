daemon off;
worker_processes <%= ENV['NGINX_WORKERS'] || 4 %>;

events {
	use epoll;
	accept_mutex on;
	worker_connections <%= ENV['NGINX_WORKER_CONNECTIONS'] || 1024 %>;
# 	multi_accept on;
}

http {

	##
	# Basic Settings
	##

	server_tokens off;

	 server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include mime.types;
	default_type application/octet-stream;
	sendfile on;


	##
	# Logging Settings
	##

	log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
	access_log <%= ENV['NGINX_ACCESS_LOG_PATH'] || 'logs/nginx/access.log' %> l2met;
	error_log <%= ENV['NGINX_ERROR_LOG_PATH'] || 'logs/nginx/error.log' %>;
	##
	# Gzip Settings
	##

	gzip on;

	# gzip_vary on;
	# gzip_proxied any;
	gzip_comp_level 2;
	gzip_min_length 512;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    client_body_timeout <%= ENV['NGINX_CLIENT_BODY_TIMEOUT'] || 5 %>;


    upstream app_server {
		server unix:/tmp/nginx.socket fail_timeout=0;
	}

	##
	# Virtual Host Configs
	##

	server {

		listen <%= ENV["PORT"] %>;

		server_name _;

		large_client_header_buffers 4 16k;

		root /app/public; # path to your app

		location /media {
		    root /media;
		}

        location /static {
            root /static;
		}


		location / {
			# Uncomment this if statement to force SSL/redirect http -> https
			if ($http_x_forwarded_proto != "https") {
			  return 301 https://$host$request_uri;
			}

			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			# proxy_set_header X-Forwarded-Proto $scheme;
			proxy_set_header Host $http_host;
			proxy_redirect off;
			proxy_pass http://app_server;
		}


		keepalive_timeout 5;
		client_max_body_size <%= ENV['NGINX_CLIENT_MAX_BODY_SIZE'] || 1 %>M;
	}

}

